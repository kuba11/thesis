{
    "collab_server" : "",
    "contents" : "funkcja1 <- function (x, y, z){\n  \n  #Tworzymy macierz, gdzie ka?da cz. listy to 1 plik\n  inFile <- x\n  a = list()\n  for (i in 1:length(x[, 1])){ \n  a[[i]] <- read.table(textConnection(rev(rev(readLines(inFile$datapath[i]))[-(1:10)])),\n                              skip = 10, header = T, sep = \"\\t\", nrows = 68)\n  }\n  \n  #Wydajno??\n  inFile2 <- y\n  eff <- read.xlsx(inFile2$datapath, header = T, 1)[, 2]\n  \n  #Selekcja gen?w referencyjnych\n  \n  k = 1  \n  ref <- list()\n  j <- 1\n  liczba_usuniec <- 0\n  ref_index <- c()\n  \n  \n  for (i in 1:length(z)){\n    for (j in 1:length(a)){\n  if (strsplit(inFile$name[j], '_')[[1]][1] == z[i]){\n    #Przypisywanie plik?w z genami ref do nowej zmiennej\n    ref[[k]] = a[[j]]\n    \n\n\n  k=k+1\n  #Usuwanie z listy normalnych gen?w\n  \n  \n  ref_index[k - 1] <- j \n  }}}\n  \n  k <- 1\nfor (i in ref_index){\n  j <- i + 1 - k\n  a[[j]] <- NULL\n  k <- k + 1\n  }\n\n\n### Sprawdzanie, czy s? geny referencyjne i zwyk?e \n  if (length(ref) > 0 & length(a) > 0){\n  \n### Obliczenia dla gen?w referencyjnych\n  #Obliczanie dCt dla ref\n    \n  sample_no <- length(ref[[1]][, 1])\n  refCt <- data.frame(matrix(nrow = length(ref), ncol = sample_no))\n  refdCt <- refCt\n  preQ <- refCt\n  refQ <- data.frame(matrix(nrow = 1, ncol = sample_no))\n  \n  for (i in 1:length(ref)){\n    refCt[i, ] <- as.numeric(as.character(ref[[i]][, 6]))\n    refCal <- mean(as.numeric(as.character(ref[[i]][(sample_no-5):sample_no, 6])), na.rm = T)\n    refdCt[i, ] <- refCal - refCt[i, ]\n  }\n  \n  # Obliczamy Q, czyli potrzebne s? wydajno?ci\n  for (i in 1:length(ref)){\n    preQ[i, ] <- eff[ref_index[i]]^refdCt[i, ]\n  }\n  \n  \n  #?rednia geometryczna\n  for (i in 1:dim(preQ)[2]){\n    refQ[i] <- (prod(preQ[, i], na.rm = T))^(1/sum(!is.na(preQ[, i]))) \n  }\n\n  \n### Przygotowanie danych\n  # Obliczanie dCt\n  Ct <- data.frame(matrix(nrow = length(a), ncol = sample_no))\n  Q <- Ct\n  Cal <- c()\n\n  for (i in 1:length(a)){\n    Ct[i, ] <- as.numeric(as.character(a[[i]][, 6]))\n    Cal[i] <- mean(as.numeric(as.character(a[[i]][(sample_no-5):sample_no, 6])), na.rm = T)\n  }\n    dCt <- Cal - Ct\n  \n  # Obliczamy Q, czyli potrzebne s? wydajno?ci\n  \n  gene_index <- c(1:(length(a)+length(ref_index)))[-ref_index]\n  \n  for (i in 1:length(a)){\n    Q[i, ] <- eff[gene_index[i]]^dCt[i, ]\n  }\n  \n\n### Fold difference\n\nFd <- data.frame(matrix(nrow = length(gene_index), ncol = sample_no))\n\nfor (i in 1:length(gene_index)){\n  Fd[i, ] <- Q[i, ]/refQ\n}\nFd <- t(Fd)\n\n### Sprawdzamy, czy liczba pr?bek jest taka sama\nif (dim(refQ)[2] != dim(Q)[2]){\n  return(NULL)\n}else{\n\n\n    #Nazwy wierszy i kolumn\n    \n    Fd <- cbind(as.character(a[[1]][, 2]), Fd)\n    k <- 1 \n    columns <- c()\n    \n    for (i in gene_index){\n     columns[k] <- strsplit(inFile$name[i], '_')[[1]][1]\n    k <- k + 1\n    \n    Fd[is.na(Fd)] <- c('No data')\n}\n    colnames(Fd) <- c('Sample Name', columns)\n}\n\n  } else if ( length(ref) == 0) {\n    Fd <- c('No reference genes')\n  } else{\n    Fd <- c('No genes for the analysys (all genes are reference genes)')\n  \n    \n    }\n  return(Fd)\n}",
    "created" : 1494497164419.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2194064565",
    "id" : "DBE7A4D7",
    "lastKnownWriteTime" : 1494579694,
    "last_content_update" : 1494579694,
    "path" : "C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis/R/funkcja1.R",
    "project_path" : "R/funkcja1.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}