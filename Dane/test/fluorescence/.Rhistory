runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = "ACTB_pl2_07_10_2014"
as.matrix(data.frame(strsplit(a, '_'))[1, ])
a = as.matrix(data.frame(strsplit(a, '_'))[1, ])
as.matrix(data.frame(strsplit(a, '_'))[1, ])
a="ACTB"
as.matrix(data.frame(strsplit(a, '_'))[1, ])
a = "as.matrix(data.frame(strsplit(inFile$name, '_'))[1, ])"
a = "ACTB_pl2_07_10_2014"
lapply(a, strsplit, '_')
a = "as.matrix(data.frame(strsplit(inFile$name, '_'))[1, ])"
A = "ACTB"
lapply(a, strsplit, '_')
a=A
lapply(a, strsplit, '_')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = "ATP6V1E1_pl3_08_10_2014.txt"
b = as.matrix(data.frame(strsplit(a, '_'))[1, ])
b = as.matrix(data.frame(strsplit(a, '_.'))[1, ])
b = as.matrix(data.frame(strsplit(a, '_.')))
View(b)
b = as.matrix(data.frame(strsplit(a, '_', ".")))
View(b)
b = as.matrix(data.frame(strsplit(a, '_', '.')))
aa = "ATP6V1E1.txt"
bb = as.matrix(data.frame(strsplit(aa, '_', '.')))
bb = as.matrix(data.frame(strsplit(aa, '.')))
bb = as.matrix(data.frame(strsplit(aa, '\.')))
bb = as.matrix(data.frame(strsplit(aa, '[.]')))
bb = as.matrix(data.frame(strsplit(aa, '_', '[.]')))
bb = as.matrix(data.frame(strsplit(aa, '_[.]', )))
bb = as.matrix(data.frame(strsplit(aa, '_[.]' )))
bb = as.matrix(data.frame(strsplit(aa, c('_', '[.]') )))
?strsplit
file1.name <- as.matrix(data.frame(strsplit(11, '[.]'))[1, ])
file1.name <- as.matrix(data.frame(strsplit(aa, '[.]'))[1, ])
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
a = (1,1,2,2,3,4,1,2,5)
a = c(1,1,2,2,3,4,1,2,5)
b=c("a","a","a","b,"b","b"","c","c","c")
b=c("a","a","a","b,"b","b","c","c","c")
b=c("a","a","a","b","b","b","c","c","c")
boxplot(a~b)
boxplot(a~b, col = "rainbow")
?rainbow
boxplot(a~b, col = rainbow(9))
?rainbow
boxplot(a~b, col = heat.colors(9))
runApp()
boxplot(a~b, col = heat.colors(20))
boxplot(a~b, col = heat.colors(2))
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?img
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = c(1,3,3,2,2,6,3,4,5)
barplot(a)
b = matrix(a, ncol = 3
)
barplot(rowSums(b))
runApp()
runApp()
?rainbow
runApp()
runApp()
runApp()
runApp()
c = c("a","a","a","a","a","a","a","a","a")
barplot(a,xlab=c)
barplot(a,xlab=c, las-3)
barplot(a,xlab=c, las=3)
barplot(a,xlab=c, las=1)
barplot(a,xlab=c, las=2)
barplot(a,xlab=c, las=3)
barplot(a,xlab=c, las=4)
barplot(a,xlab=c, las=3)
barplot(a,xlab=c, las=2)
barplot(a,xlab=c, las=1)
barplot(a,xlab=c, las=3)
barplot(a,xlab=c)
axis(2, las=1)
axis(2, las=1, axis(1, las=1))
axis(2, las=1, axis(1, las=1))
axis(2, axis(1, las=1))
axis(2)
axis(2, axis(1, las=1))
axis(2, xlab = c, axis(1, las=1))
axis(2, xlab = c )
axis(a, xlab = c, axis(1, las=1))
axis(a, xlab = c)
barplot(a, xlab = c, axis(1, las=1))
barplot(a, xlab = c)
axis(1, las=1)
barplot(a, xlab = c)
axis(c, las=1)
barplot(a, xlab = c)
par(las=2)
par(las=1)
par(las=3)
barplot(a, ylab = c, , horiz=TRUE)
barplot(a, ylab = c,  horiz=TRUE)
barplot(a,  horiz=TRUE)
barplot(a,  horiz=TRUE)
barplot(a, ylab = c,  horiz=TRUE)
barplot(a, ylab = c,  horiz=TRUE, las = 3)
barplot(a, ylab = c,  horiz=TRUE, las = 3)
barplot(a, ylab = c,  horiz=TRUE, las = 1)
barplot(a, ylab = c,  horiz=TRUE, las = 2)
barplot(a, ylab = c,  horiz=TRUE, las = 3)
barplot(a, ylab = c,  , las = 3, horiz=TRUE)
barplot(a, las = 3, ylab = c,   horiz=TRUE)
barplot(a, las = 3, ylab = c,   horiz=TRUE)
?barplot
barplot(a, names.arg = c)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sd
runApp()
?pmax
runApp()
a[a>3] = 3
runApp()
runApp()
runApp()
runApp()
?matrix
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?barplot
library('ggplot2')
a=c(1,5,3,2)
b=c(1,2,2,1)
barplot(a)
error.bar(a,b)
library('ggplot2')
c=c('a','a','b','b')
qplot(x=c, y=a, fill=variable,
geom="bar", stat="identity",
position="dodge")
qplot(x=c, y=a, fill=c,
geom="bar", stat="identity",
position="dodge")
qplot(x=c, y=a, fill=c,
geom="bar")
qplot(y=a, geom="bar")
qplot(a, geom="bar")
qplot(a~c, geom="bar")
qplot(c, a, geom="bar")
barplot(a, c)
barplot(a)
barplot(a~c)
barplot(c~a)
barplot(a, names.arg = c)
qplot(a)
?qplot
qplot(c, y = a)
c=c("a","b","c","d")
qplot(c, y = a)
?qplot
qplot(c, y = a, geom = "bar")
?qplot
qplot(c, y = a, geom = "histogram")
qplot(c, y = a, geom = "bar")
qplot(c, y = a, geom = "bar", position="dodge")
qplot(c, y = a, geom = "bar")
qplot(c, y = a, geom = "bar", stat="identity")
d = data.frame(c, y = a, geom = "bar")
ggplot(d, aes(x=c,y = a)) +geom_bar(stat = "identity")
geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")+theme_bw()
?geom_errorbar
e = data.frame(c, y = b)
geom_errorbar(inherit.aes = T, data = e)
f=ggplot(d, aes(x=c,y = a)) +geom_bar(stat = "identity")
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")+theme_bw()
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge", col = heat.colors(4)+theme_bw()
)
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")+theme_bw()
f=ggplot(d, aes(x=c,y = a), , col = heat.colors(4)) +geom_bar(stat = "identity")
f=ggplot(d, aes(x=c,y = a),  col = heat.colors(4)) +geom_bar(stat = "identity")
f=ggplot(d, aes(x=c,y = a),  col = heat.colors(4)) +geom_bar(stat = "identity", , col = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")+theme_bw()
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")
?ggplot
ggplot(d, aes(x=c,y = a),  col = heat.colors(4))
ggplot(d, aes(x=c,y = a),  col = heat.colors(4)) +
geom_bar(stat = "identity", , col = heat.colors(4))
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  col = heat.colors(4))
ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  col = heat.colors(4))
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
shiny::runApp()
f=ggplot(d, aes(x=c,y = a), las = 3) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
runApp()
f=ggplot(d, aes(x=c,y = a), main = "Bar and whisker plot of means and standard deviation") + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4), main = "Bar and whisker plot of means and standard deviation")
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge", main = "Bar and whisker plot of means and standard deviation")
ggtitle("Bar and whisker plot of means and standard deviation")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
ggtitle("Bar and whisker plot of means and standard deviation")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge") +
ggtitle("Bar and whisker plot of means and standard deviation")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors())
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge") +
ggtitle("Bar and whisker plot of means and standard deviation")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
library(shiny)
runApp()
install.packages('xlsx')
library('xlsx')
install.packages("xlsx")
runApp()
shiny::runApp()
install.packages("xlsx")
?xls
??xlsx
runApp()
?read.xlsx
library(shiny)
library('xlsx')
install.packages("xlsx")
shiny::runApp()
install.packages("xlsx")
install.packages('xlsx', type='source', repos='http://cran.rstudio.com')
runApp()
library('xlsx')
R --vanilla
install.packages('xlsx', dependencies=TRUE, repos='http://cran.rstudio.com/')
library('xlsx')
runApp()
library(qpcr)
install.packages("qpcr")
library(qpcr)
install.packages('qpcr', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(qpcR)
install.packages('qpcR', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(qpcr)
library(qpcR)
shiny::runApp()
runApp()
runApp()
plot(1:3)
runApp()
shiny::runApp()
shiny::runApp()
#data
setwd('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis/Dane/test/fluorescence')
data=read.table('ACTB_pl2_07_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:40])
data <- cbind(1:40, data)
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4)
?cat
cat(" Found", CHAR, "outlier for", NAMES[OUTL], "\n")
cat(" Found", 'CHAR', "outlier for", NAMES[OUTL], "\n")
cat(" Found", 'CHAR', "outlier for", 'NAMES[OUTL]', "\n")
data=read.table('test.txt', header = T, sep = "\t")
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4)
mode=modlist(data, cyc = 1, fluo = 2:20, model = l4)
data=read.table('ACTB_pl2_07_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:40])
data <- cbind(1:40, data)
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4)
?modlist
methods(modlist)
modlist
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4)
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4)
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4, check=NULL)
colnames[data]
data <- data.frame(data)
View(data)
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4) # Checking for outliers (check) has to be NULL, or error
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
disp(1)
print(1)
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
data=read.table('ACTB_pl2_07_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:40])
data <- cbind(1:40, data)
data <- data.frame(data)
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4)
model=pcrbatch(mode, plot=F) # Model is only here to check, if fitting failed
model=pcrbatch(mode, plot=F, silent = T) # Model is only here to check, if fitting failed
?pcrbatch
model=pcrbatch(mode, plot=F, verbose = F) # Model is only here to check, if fitting failed
# Fitting model for not fitted stuff
not_fitted=grep("\\*",names(model[-1]),perl=T)
#not_fitted=c(1,2,3)
if(length(not_fitted)!=0){
smoothPAR = list(span = 0.1)
for(i in not_fitted){
if(length(na.omit(data[, c(1,i+1)]))==0)
mode[i]=modlist(na.omit(data[, c(1,i+1)]),1,2, model = l4,smooth = c("supsmu"), smoothPAR = smoothPAR)
}
model=pcrbatch(mode,plot=F)
}
grep("\\*",names(model[-1]),perl=T)
## Selecting fluorescence threshold to determine Ct value
Ct = unlist(lapply(1:length(mode), function(x){
unlist(predict(mode[[x]], newdata = data.frame(Fluo = 0.4), which = "x"))
})) # works from fluo 0.29 for some
Ct
## Selecting fluorescence threshold to determine Ct value
Ct = unlist(lapply(1:length(mode), function(x){
unlist(predict(mode[[x]], newdata = data.frame(Fluo = 0.4), which = "x"))
})) # works from fluo 0.29 for some
not_fitted
x
length(mode)
predict(mode[[x]], newdata = data.frame(Fluo = 0.4), which = "x")
predict(mode[[1]], newdata = data.frame(Fluo = 0.4), which = "x")
predict(mode[[1]], newdata = data.frame(Fluo = 0.4))
predict(mode[[1]], newdata = data.frame(Fluo = 0.4), which = "x")
predict(mode[[1]], newdata = data.frame(Fluo = 0.3), which = "x")
predict(mode[[1]], newdata = data.frame(Fluo = 0.2), which = "x")
predict(mode[[1]], newdata = data.frame(Fluo = 0.5), which = "x")
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
library(qpcR)
#data
setwd('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis/Dane/test/fluorescence')
data=read.table('ACTB_pl2_07_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:40])
data <- cbind(1:40, data)
data <- data.frame(data)
# backsub - background substraction. More: https://www.rdocumentation.org/packages/qpcR/versions/1.3-1/topics/pcrbatch
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4)
model=pcrbatch(mode, plot=F) # Model is only here to check, if fitting failed
# Fitting model for not fitted stuff
# While loop here?
not_fitted=grep("\\*", names(model[-1]), perl=T)
#not_fitted=c(1,2,3)
if(length(not_fitted)!=0){
smoothPAR = list(span = 0.1)
for(i in not_fitted){
if(length(na.omit(data[, c(1,i+1)]))==0)
mode[i]=modlist(na.omit(data[, c(1,i+1)]),1,2, model = l4,smooth = c("supsmu"), smoothPAR = smoothPAR)
}
model=pcrbatch(mode, plot=F)
}
mode[[1]]
predict(mode[[x]])
predict(mode[[1]])
predict(mode[[1]])[1]
predict(mode[[1]])[1,]
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
library(qpcR)
#data
setwd('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis/Dane/test/fluorescence')
data=read.table('ACTB_pl2_07_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:40])
data <- cbind(1:40, data)
data <- data.frame(data)
# backsub - background substraction. More: https://www.rdocumentation.org/packages/qpcR/versions/1.3-1/topics/pcrbatch
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4)
mode
mode[[1]]$m
mode[[1]]$data
mode[[1]]$model
mode[[1]]$model$e
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
?ggplot
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
d=data.frame(c(1,2,10000000000,3,4,10,9))
m=c('a','a','a','a','a','a','a')
x=1:7
f=ggplot(d, aes(x = x, y = m))
f
f=ggplot(d)
f
f=ggplot(d, aes(x = x, y = m)) + geom_bar(stat = "identity",  fill = heat.colors(length(x)))
f
m=d
f=ggplot(d, aes(x = x, y = m)) + geom_bar(stat = "identity",  fill = heat.colors(length(x)))
f
> d=data.frame(c(1,2,10000000000,3,4,10,9,01 2031
> d=data.frame(c(1,2,10000000000,3,4,10,9,01, 2031)
> d=data.frame(c(1,2,10000000000,3,4,10,9,01, 2031))
d=data.frame(c(1,2,10000000000,3,4,10,9,1, 2031))
f=ggplot(d, aes(x = x, y = m)) + geom_bar(stat = "identity",  fill = heat.colors(length(x)))
f
f=ggplot(d, aes(x = x, y = m))
f
f=ggplot(d, aes(x = x, y = m))
f
f=ggplot(d, aes(x = x, y = m)) + geom_bar(stat = "identity",  fill = heat.colors(9))
f
f=ggplot(d, aes(x = x, y = m)) + geom_bar(stat = "identity",  fill = heat.colors(1))
f
