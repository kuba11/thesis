runApp()
runApp()
runApp()
?sd
runApp()
?pmax
runApp()
a[a>3] = 3
runApp()
runApp()
runApp()
runApp()
?matrix
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?barplot
library('ggplot2')
a=c(1,5,3,2)
b=c(1,2,2,1)
barplot(a)
error.bar(a,b)
library('ggplot2')
c=c('a','a','b','b')
qplot(x=c, y=a, fill=variable,
geom="bar", stat="identity",
position="dodge")
qplot(x=c, y=a, fill=c,
geom="bar", stat="identity",
position="dodge")
qplot(x=c, y=a, fill=c,
geom="bar")
qplot(y=a, geom="bar")
qplot(a, geom="bar")
qplot(a~c, geom="bar")
qplot(c, a, geom="bar")
barplot(a, c)
barplot(a)
barplot(a~c)
barplot(c~a)
barplot(a, names.arg = c)
qplot(a)
?qplot
qplot(c, y = a)
c=c("a","b","c","d")
qplot(c, y = a)
?qplot
qplot(c, y = a, geom = "bar")
?qplot
qplot(c, y = a, geom = "histogram")
qplot(c, y = a, geom = "bar")
qplot(c, y = a, geom = "bar", position="dodge")
qplot(c, y = a, geom = "bar")
qplot(c, y = a, geom = "bar", stat="identity")
d = data.frame(c, y = a, geom = "bar")
ggplot(d, aes(x=c,y = a)) +geom_bar(stat = "identity")
geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")+theme_bw()
?geom_errorbar
e = data.frame(c, y = b)
geom_errorbar(inherit.aes = T, data = e)
f=ggplot(d, aes(x=c,y = a)) +geom_bar(stat = "identity")
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")+theme_bw()
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge", col = heat.colors(4)+theme_bw()
)
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")+theme_bw()
f=ggplot(d, aes(x=c,y = a), , col = heat.colors(4)) +geom_bar(stat = "identity")
f=ggplot(d, aes(x=c,y = a),  col = heat.colors(4)) +geom_bar(stat = "identity")
f=ggplot(d, aes(x=c,y = a),  col = heat.colors(4)) +geom_bar(stat = "identity", , col = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")+theme_bw()
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")
?ggplot
ggplot(d, aes(x=c,y = a),  col = heat.colors(4))
ggplot(d, aes(x=c,y = a),  col = heat.colors(4)) +
geom_bar(stat = "identity", , col = heat.colors(4))
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  col = heat.colors(4))
ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  col = heat.colors(4))
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=0), position="dodge")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
shiny::runApp()
f=ggplot(d, aes(x=c,y = a), las = 3) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
runApp()
f=ggplot(d, aes(x=c,y = a), main = "Bar and whisker plot of means and standard deviation") + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4), main = "Bar and whisker plot of means and standard deviation")
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge", main = "Bar and whisker plot of means and standard deviation")
ggtitle("Bar and whisker plot of means and standard deviation")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge")
ggtitle("Bar and whisker plot of means and standard deviation")
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors(4))
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge") +
ggtitle("Bar and whisker plot of means and standard deviation")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
f=ggplot(d, aes(x=c,y = a)) + geom_bar(stat = "identity",  fill = heat.colors())
f+geom_errorbar(aes(ymax=a+b, ymin=a), position="dodge") +
ggtitle("Bar and whisker plot of means and standard deviation")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
library(shiny)
runApp()
install.packages('xlsx')
library('xlsx')
install.packages("xlsx")
runApp()
shiny::runApp()
install.packages("xlsx")
?xls
??xlsx
runApp()
?read.xlsx
library(shiny)
library('xlsx')
install.packages("xlsx")
shiny::runApp()
install.packages("xlsx")
install.packages('xlsx', type='source', repos='http://cran.rstudio.com')
runApp()
library('xlsx')
R --vanilla
install.packages('xlsx', dependencies=TRUE, repos='http://cran.rstudio.com/')
library('xlsx')
runApp()
library(qpcr)
install.packages("qpcr")
library(qpcr)
install.packages('qpcr', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(qpcR)
install.packages('qpcR', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(qpcr)
library(qpcR)
shiny::runApp()
runApp()
runApp()
plot(1:3)
runApp()
shiny::runApp()
shiny::runApp()
?ggplot
runApp()
shiny::runApp()
?boxplot
runApp()
a=c(1,2,3)
b=c('a','b','c')
c=apply(1:length(a), function(x){ b[x]})
c=apply(1:length(a), 1, function(x){ b[x]})
c=lapply(1:length(a), function(x){ b[x]})
c
c=sapply(1:length(a), function(x){ b[x]})
c
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a=matrix(ncol=2, nrow=2)
a=matrix(c(1,2,3,4),ncol=2, nrow=2)
a['1',]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?cbind
runApp()
runApp()
runApp()
shiny::runApp()
?which
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp('~/WSP_proj')
runApp()
runApp()
runApp()
a=read.xlsx('wynik.xlsx')
a=read.xlsx('wynik.xlsx', 1)
a
y <- a[, -c(1, dim(a)[1])]
y <- as.numeric(c(unlist(t(y))))
x <- data.matrix(a[, 1])
x <- rep(x, each = dim(a)[2]-1)
boxplot(y ~ x, outline = F, main = c("Boxplot - Normalized and callibrated relative expression value"), col = heat.colors(length(unique(x))), xlab = "Samples", ylab = 'Fold difference',  las = 2)
y
x
y
View(a)
x
boxplot(y[1:2] ~ x[1:2])
boxplot(y ~ x, outline = F, main = c("Boxplot - Normalized and callibrated relative expression value"), col = heat.colors(length(unique(x))), xlab = "Samples", ylab = 'Fold difference',  las = 2)
y[1:2]
x[1:2]
boxplot(y[139:141] ~ x[139:141])
boxplot(y ~ x, outline = F, main = c("Boxplot - Normalized and callibrated relative expression value"), col = heat.colors(length(unique(x))), xlab = "Samples", ylab = 'Fold difference',  las = 2)
y[139:141]
x[139:141]
x
y
a
-c(1, dim(a)[1])
dim(a)[2]
y <- a[, -c(1, dim(a)[2])]
y <- as.numeric(c(unlist(t(y))))
x <- data.matrix(a[, 1])
x <- rep(x, each = dim(a)[2]-1)
boxplot(y ~ x, outline = F, main = c("Boxplot - Normalized and callibrated relative expression value"), col = heat.colors(length(unique(x))), xlab = "Samples", ylab = 'Fold difference',  las = 2)
boxplot(y[139:141] ~ x[139:141])
a=read.xlsx('wynik.xlsx', 1)
y <- a[, -c(1, dim(a)[2])]
y <- as.numeric(c(unlist(t(y))))
x <- data.matrix(a[, 1])
x <- rep(x, each = dim(a)[2]-1)
boxplot(y ~ x, outline = F, main = c("Boxplot - Normalized and callibrated relative expression value"), col = heat.colors(length(unique(x))), xlab = "Samples", ylab = 'Fold difference',  las = 2)
y
x
x <- rep(x, each = dim(y)[2])
boxplot(y ~ x, outline = F, main = c("Boxplot - Normalized and callibrated relative expression value"), col = heat.colors(length(unique(x))), xlab = "Samples", ylab = 'Fold difference',  las = 2)
y
x
x <- rep(x, each = dim(a)[2]-2)
boxplot(y ~ x, outline = F, main = c("Boxplot - Normalized and callibrated relative expression value"), col = heat.colors(length(unique(x))), xlab = "Samples", ylab = 'Fold difference',  las = 2)
y
x
dim(a)[2]
x=c()
x <- data.matrix(a[, 1])
x <- rep(x, each = dim(a)[2]-2)
boxplot(y ~ x, outline = F, main = c("Boxplot - Normalized and callibrated relative expression value"), col = heat.colors(length(unique(x))), xlab = "Samples", ylab = 'Fold difference',  las = 2)
boxplot(y[139:141] ~ x[139:141])
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('DT')
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?conditionalPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(qpcR)
#data
setwd('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis/Dane/test/fluorescence')
data=read.table('ACTB_pl2_07_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:69])
data <- cbind(1:69, data)
data <- data.frame(data)
# backsub - background substraction. More: https://www.rdocumentation.org/packages/qpcR/versions/1.3-1/topics/pcrbatch
mode=modlist(data, cyc = 1, fluo = 2:69, model = l4, opt = F)
mode
mode
mode[1]
mode
model=pcrbatch(mode, plot=F) # Model is only here to check, if fitting failed
mode[1]
model[1]
mode
# Fitting model for not fitted stuff
not_fitted=grep("\\*", names(model[-1]), perl=T)
# Fitting model for not fitted stuff
star12<- grep("\\*", names(model[-1]), perl=T)
star2 <- grep("\\*\\*",names(model[-1]),perl=T)
# Fitting model for not fitted stuff
star12<- grep("\\*", names(model[-1]), perl=T) #fitting failed + no sigmoidal structure
star2 <- grep("\\*\\*",names(model[-1]),perl=T) #no sigmoidal structure
star12
star2
mode[28]
mode[28][1]
mode[28]$data
mode[28]$DATA
mode[28][[1$DATA
mode[28][[1]]$DATA
mode[28][[1]]$DATA[1]
mode[28][[1]]$DATA[1,]
mode[28][[1]]$DATA[1,2]
mode[28][[1]]$DATA[,2]
plot(mode[28][[1]]$DATA[,1], mode[28][[1]]$DATA[,2])
library(qpcR)
#data
setwd('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis/Dane/test/fluorescence')
data=read.table('ACTB_pl2_07_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:40])
data <- cbind(1:40, data)
data <- data.frame(data)
# backsub - background substraction. More: https://www.rdocumentation.org/packages/qpcR/versions/1.3-1/topics/pcrbatch
mode=modlist(data, cyc = 1, fluo = 2:69, model = l4, opt = F)
model=pcrbatch(mode, plot=F) # Model is only here to check, if fitting failed
# Fitting model for not fitted stuff
star12 <- grep("\\*", names(model[-1]), perl=T) #fitting failed + no sigmoidal structure
star2 <- grep("\\*\\*",names(model[-1]),perl=T) #no sigmoidal structure
plot(mode[28][[1]]$DATA[,1], mode[28][[1]]$DATA[,2])
library(qpcR)
#data
setwd('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis/Dane/test/fluorescence')
data=read.table('ATP6V1E1_pl3_08_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:40])
data <- cbind(1:40, data)
data <- data.frame(data)
# backsub - background substraction. More: https://www.rdocumentation.org/packages/qpcR/versions/1.3-1/topics/pcrbatch
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4, opt = F)
model=pcrbatch(mode, plot=F) # Model is only here to check, if fitting failed
# Fitting model for not fitted stuff
star12 <- grep("\\*", names(model[-1]), perl=T) #fitting failed + no sigmoidal structure
star2 <- grep("\\*\\*",names(model[-1]),perl=T) #no sigmoidal structure
library(qpcR)
#data
setwd('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis/Dane/test/fluorescence')
data=read.table('BIRC3_pl1_07_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:40])
data <- cbind(1:40, data)
data <- data.frame(data)
# backsub - background substraction. More: https://www.rdocumentation.org/packages/qpcR/versions/1.3-1/topics/pcrbatch
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4, opt = F)
model=pcrbatch(mode, plot=F) # Model is only here to check, if fitting failed
# Fitting model for not fitted stuff
star12 <- grep("\\*", names(model[-1]), perl=T) #fitting failed + no sigmoidal structure
star2 <- grep("\\*\\*",names(model[-1]), perl=T) #no sigmoidal structure
library(qpcR)
#data
setwd('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis/Dane/test/fluorescence')
data=read.table('CCL2_pl1_07_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:40])
data <- cbind(1:40, data)
data <- data.frame(data)
# backsub - background substraction. More: https://www.rdocumentation.org/packages/qpcR/versions/1.3-1/topics/pcrbatch
mode=modlist(data, cyc = 1, fluo = 2:40, model = l4, opt = F)
model=pcrbatch(mode, plot=F) # Model is only here to check, if fitting failed
# Fitting model for not fitted stuff
star12 <- grep("\\*", names(model[-1]), perl=T) #fitting failed + no sigmoidal structure
star2 <- grep("\\*\\*",names(model[-1]), perl=T) #no sigmoidal structure
plot(mode[28][[1]]$DATA[,1], mode[28][[1]]$DATA[,2])
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
library(qpcR)
#data
setwd('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis/Dane/test/fluorescence')
data=read.table('CCL2_pl1_07_10_2014_clipped.txt', header = F, skip = 2, sep = "\t")
#data=read.table('test.txt', header = T, sep = "\t")
data <- data[, -c(1:3)]
data <- t(data[, 1:40])
data <- cbind(1:40, data)
data <- data.frame(data)
# backsub - background substraction. More: https://www.rdocumentation.org/packages/qpcR/versions/1.3-1/topics/pcrbatch
mode=modlist(data, cyc = 1, fluo = 2:69, model = l4, opt = F)
model=pcrbatch(mode, plot=F) # Model is only here to check, if fitting failed
# Fitting model for not fitted stuff
star12 <- grep("\\*", names(model[-1]), perl=T) #fitting failed + no sigmoidal structure
star2 <- grep("\\*\\*",names(model[-1]), perl=T) #no sigmoidal structure
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
runApp('C:/Users/jakpo_000/Desktop/Nauka/Inzynierka/Program/thesis')
